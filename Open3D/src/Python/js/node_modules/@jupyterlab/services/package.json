{
  "_args": [
    [
      "@jupyterlab/services@^1.0.1 || ^2.0.0 || ^3.0.0 || 4.0.0-alpha.3 || 4.0.0-alpha.6 || 4.0.0-alpha.8",
      "/home/marsar/Desktop/Open3D/build/lib/python_package/js/node_modules/@jupyter-widgets/base"
    ]
  ],
  "_from": "@jupyterlab/services@>=1.0.1 <2.0.0||>=2.0.0 <3.0.0||>=3.0.0 <4.0.0||4.0.0-alpha.3||4.0.0-alpha.6||4.0.0-alpha.8",
  "_hasShrinkwrap": false,
  "_id": "@jupyterlab/services@4.0.0-alpha.8",
  "_inCache": true,
  "_installable": true,
  "_location": "/@jupyterlab/services",
  "_nodeVersion": "11.14.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/services_4.0.0-alpha.8_1559165707154_0.8172175694184176"
  },
  "_npmUser": {
    "email": "jason@jasongrout.org",
    "name": "jasongrout"
  },
  "_npmVersion": "lerna/3.14.1/node@v11.14.0+x64 (darwin)",
  "_phantomChildren": {},
  "_requested": {
    "name": "@jupyterlab/services",
    "raw": "@jupyterlab/services@^1.0.1 || ^2.0.0 || ^3.0.0 || 4.0.0-alpha.3 || 4.0.0-alpha.6 || 4.0.0-alpha.8",
    "rawSpec": "^1.0.1 || ^2.0.0 || ^3.0.0 || 4.0.0-alpha.3 || 4.0.0-alpha.6 || 4.0.0-alpha.8",
    "scope": "@jupyterlab",
    "spec": ">=1.0.1 <2.0.0||>=2.0.0 <3.0.0||>=3.0.0 <4.0.0||4.0.0-alpha.3||4.0.0-alpha.6||4.0.0-alpha.8",
    "type": "range"
  },
  "_requiredBy": [
    "/@jupyter-widgets/base"
  ],
  "_resolved": "https://registry.npmjs.org/@jupyterlab/services/-/services-4.0.0-alpha.8.tgz",
  "_shasum": "8124d66a40c5fc22a8978628dc9874f53babf418",
  "_shrinkwrap": null,
  "_spec": "@jupyterlab/services@^1.0.1 || ^2.0.0 || ^3.0.0 || 4.0.0-alpha.3 || 4.0.0-alpha.6 || 4.0.0-alpha.8",
  "_where": "/home/marsar/Desktop/Open3D/build/lib/python_package/js/node_modules/@jupyter-widgets/base",
  "author": {
    "name": "Project Jupyter"
  },
  "browser": {
    "node-fetch": false,
    "ws": false
  },
  "bugs": {
    "url": "https://github.com/jupyterlab/jupyterlab/issues"
  },
  "dependencies": {
    "@jupyterlab/coreutils": "^3.0.0-alpha.8",
    "@jupyterlab/observables": "^2.2.0-alpha.8",
    "@phosphor/algorithm": "^1.1.2",
    "@phosphor/coreutils": "^1.3.0",
    "@phosphor/disposable": "^1.1.2",
    "@phosphor/signaling": "^1.2.2",
    "node-fetch": "^2.6.0",
    "ws": "^7.0.0"
  },
  "description": "Client APIs for the Jupyter services REST APIs",
  "devDependencies": {
    "@types/node": "^12.0.2",
    "@types/text-encoding": "^0.0.35",
    "rimraf": "~2.6.2",
    "text-encoding": "^0.7.0",
    "typedoc": "^0.14.2",
    "typescript": "~3.4.3",
    "webpack": "^4.32.2",
    "webpack-cli": "^3.3.0"
  },
  "directories": {},
  "dist": {
    "fileCount": 60,
    "integrity": "sha512-rt3xABRMxIMsffkgqeHto2202P5xY52FndHqqQnfSMILPOZ1gMq80vvNsePf3R2RS5KnK2hk6N5YSlKZPeXx/g==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc7vsLCRA9TVsSAnZWagAAMJEQAJP3SDWL0h4IryqqqYR5\nufGQKC+I9/E/ahqe5TeBCX9TVMCzOeH9dCy8UgW86woDDZM1DCc2mPfsKQYe\nYC/xmHTioN5aKb9B5jShoegB6e4F7oz02qTObfieyLJt57/LFxKs/YmXNBua\npO+J5s45h+GMY5fOgL5YJ+hzkez7CPGhTh3RAVJWnNrBDVegDjsXDOQQq8o2\nGDjJ3PIO8R62dtEmUQGSsm4qZ/q8WwW+VCrw0YUelTqZl7SQOsSmqB/6z5pE\nRT4NK7oybEVVBbFCV6GAdP6aVjGQkrb71jo53Iyn+2i1r7hLpGrHnU+Q8Eo3\nLW+1q4tWxOWEpL0N/JO0JiawupcfJ9hTWBgcx9aFNoE2udwchOTO/f1SoULF\nyFg93cqkCPDuiCGQcVauCGc6aLs6K6zUBfJB64uYoWRdza0qjKXKx6hx9dwb\nrN8K0ycBEalK2kbR76nnTRfOM7IATI7zs8cGRsrY2N+tJfKevAv1XNoH7S1p\nmDCkV5QuGRS0t6cgdFZO8d2pR00P8oWKz3Al+qnR6jh0HsQKCy5hXAUo9tM5\nd/jC3uyVTOdFmxPGxB3HGH7yCB0pde/I+hBNNpn8fOz/7wLUtq4e8LOXV3Mv\ndGH+VtXbTaPrNEo5YMM72cX/ijTKBUQCUYDiBZOx7cHrkqoEY9JrgRdEAqU9\n1/SH\r\n=ju2t\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "8124d66a40c5fc22a8978628dc9874f53babf418",
    "tarball": "https://registry.npmjs.org/@jupyterlab/services/-/services-4.0.0-alpha.8.tgz",
    "unpackedSize": 1279023
  },
  "gitHead": "ac27c477b689240fe0e3e11ff2e3b4984687a899",
  "homepage": "https://github.com/jupyterlab/jupyterlab",
  "keywords": [
    "jupyter",
    "notebook",
    "services"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "jasongrout",
      "email": "jason@jasongrout.org"
    },
    {
      "name": "blink1073",
      "email": "steven.silvester@ieee.org"
    },
    {
      "name": "declanvk",
      "email": "dkelly.home@gmail.com"
    },
    {
      "name": "ellisonbg",
      "email": "ellisonbg@gmail.com"
    },
    {
      "name": "gadgilricha",
      "email": "gadgilricha@gmail.com"
    },
    {
      "name": "gnestor",
      "email": "grantnestor@gmail.com"
    },
    {
      "name": "ian-r-rose",
      "email": "ian.r.rose@gmail.com"
    },
    {
      "name": "jaipreets",
      "email": "jaipreet@amazon.com"
    },
    {
      "name": "darian",
      "email": "npm@darian.af"
    },
    {
      "name": "markellekelly",
      "email": "markellekelly@gmail.com"
    },
    {
      "name": "minrk",
      "email": "benjaminrk@gmail.com"
    },
    {
      "name": "mpacer",
      "email": "mpacer@berkeley.edu"
    },
    {
      "name": "noahstapp",
      "email": "noah@noahstapp.com"
    },
    {
      "name": "parente",
      "email": "parente@gmail.com"
    },
    {
      "name": "sylvaincorlay",
      "email": "sylvain.corlay@gmail.com"
    },
    {
      "name": "zuoyuanh",
      "email": "david.hzy97@gmail.com"
    }
  ],
  "name": "@jupyterlab/services",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "# JupyterLab Services\n\nJavascript client for the Jupyter services REST APIs\n\n[API Docs](http://jupyterlab.github.io/jupyterlab/)\n\n[REST API Docs](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml)\n\nNote: All functions and classes using the REST API allow a `serverSettings`\nparameter to configure requests.\nRequests are made using the `fetch` API, which is available in modern browsers\nor via `npm install fetch` for node users. The `whatwg-fetch` npm package\ncan be used to polyfill browsers that do not support the `fetch` API.\n\n## Package Install\n\n**Prerequisites**\n\n- [node](http://nodejs.org/)\n- [python](https://www.anaconda.com/distribution/)\n\n```bash\nnpm install --save @jupyterlab/services\nconda install notebook  # notebook 4.3+ required\n```\n\n## Source Build\n\n**Prerequisites**\n\n- [git](http://git-scm.com/)\n- [node 0.12+](http://nodejs.org/)\n- [python](https://www.anaconda.com/distribution/)\n\n```bash\ngit clone https://github.com/jupyterlab/jupyterlab.git\ncd packages/services\nnpm install\nnpm run build\nconda install notebook  # notebook 4.3+ required\n```\n\n**Rebuild**\n\n```bash\nnpm run clean\nnpm run build\n```\n\n## Run Tests\n\nFollow the source build instructions first.\n\n```bash\nnpm test\n```\n\n## Build Docs\n\nFollow the source build instructions first.\n\n```bash\nnpm run docs\n```\n\nNavigate to `docs/index.html`.\n\n## Supported Runtimes\n\nThe runtime versions which are currently _known to work_ are listed below.\nEarlier versions may also work, but come with no guarantees.\n\n- Node 0.12.7+\n- IE 11+\n- Firefox 32+\n- Chrome 38+\n\nNote: \"requirejs\" may need be included in a global context for `Comm` targets\nusing the a `target_module` (in the classic Notebook).\nThis can be as a `<script>` tag in the browser or by using the `requirejs`\npackage in node (`npm install requirejs` and setting\n`global.requirejs = require('requirejs');`).\n\n## Starting the Notebook Server\n\nFollow the package install instructions first.\n\nThe library requires a running Jupyter Notebook server, launched as:\n\n```bash\njupyter notebook\n```\n\n## Bundling for the Browser\n\nFollow the package install instructions first.\n\nSee `examples/browser` for an example of using Webpack to bundle the library.\n\nNote: Some browsers (such as IE11), require a polyfill for Promises.\nThe example demonstrates the use of the polyfill. See also notes about\nthe `fetch` API polyfill above.\n\n## Usage from Node.js\n\nFollow the package install instructions first.\n\nSee `examples/node` for an example of using an ES5 node script.\n\n## Usage Examples\n\n**Note:** This module is fully compatible with Node/Babel/ES6/ES5. The\nexamples below are written in TypeScript using ES6 syntax. Simply\nomit the type declarations when using a language other than TypeScript.\nA translator such as Babel can be used to convert from ES6 -> ES5.\n\n**Kernel**\n\n```typescript\nimport { KernelMessage, Kernel } from '@jupyterlab/services';\n\n// Get a list of available kernels and connect to one.\nKernel.listRunning().then(kernelModels => {\n    const kernel = Kernel.connectTo(kernelModels[0]);\n    console.log(kernel.name);\n  });\n});\n\n// Get info about the available kernels and start a new one.\nKernel.getSpecs().then(kernelSpecs => {\n  console.log('Default spec:', kernelSpecs.default);\n  console.log('Available specs', Object.keys(kernelSpecs.kernelspecs));\n  // use the default name\n  let options: Kernel.IOptions = {\n    name: kernelSpecs.default\n  };\n  Kernel.startNew(options).then(kernel => {\n    // Execute and handle replies.\n    let future = kernel.requestExecute({ code: 'a = 1' });\n    future.done.then(() => {\n      console.log('Future is fulfilled');\n    });\n    future.onIOPub = msg => {\n      console.log(msg.content); // Print rich output data.\n    };\n\n    // Restart the kernel and then send an inspect message.\n    kernel.restart().then(() => {\n      let request: KernelMessage.IInspectRequest = {\n        code: 'hello',\n        cursor_pos: 4,\n        detail_level: 0\n      };\n      kernel.requestInspect(request).then(reply => {\n        console.log(reply.content.data);\n      });\n    });\n\n    // Interrupt the kernel and then send a complete message.\n    kernel.interrupt().then(() => {\n      kernel.requestComplete({ code: 'impor', cursor_pos: 4 }).then(reply => {\n        console.log(reply.content.matches);\n      });\n    });\n\n    // Register a callback for when the kernel changes state.\n    kernel.statusChanged.connect(status => {\n      console.log('status', status);\n    });\n\n    // Kill the kernel.\n    kernel.shutdown().then(() => {\n      console.log('Kernel shut down');\n    });\n  });\n});\n```\n\n**Session**\n\n```typescript\nimport { Session } from '@jupyterlab/services';\n\n// Get a list of available sessions and connect to one.\nSession.listRunning().then(sessionModels => {\n  const session = Session.connectTo(sessionModels[0]);\n  console.log(session.kernel.name);\n});\n\n// Start a new session.\nlet options = {\n  kernelName: 'python',\n  path: '/tmp/foo.ipynb'\n};\n\nSession.startNew(options).then(session => {\n  // Execute and handle replies on the kernel.\n  let future = session.kernel.requestExecute({ code: 'a = 1' });\n  future.done.then(() => {\n    console.log('Future is fulfilled');\n  });\n\n  // Rename the session.\n  session.setPath('/local/bar.ipynb').then(() => {\n    console.log('Session renamed to', session.path);\n  });\n\n  // Register a callback for when the session dies.\n  session.terminated.connect(() => {\n    console.log('session died');\n  });\n\n  // Kill the session.\n  session.shutdown().then(() => {\n    console.log('session closed');\n  });\n});\n```\n\n**Comm**\n\n```typescript\nimport { Kernel } from '@jupyterlab/services';\n\n// Create a comm from the server side.\n//\n// Get info about the available kernels and connect to one.\nKernel.getSpecs()\n  .then(kernelSpecs => {\n    return Kernel.startNew({\n      name: kernelSpecs.default\n    });\n  })\n  .then(kernel => {\n    let comm = kernel.connectToComm('test').then(comm => {\n      comm.open('initial state');\n      comm.send('test');\n      comm.close('bye');\n    });\n  });\n\n// Create a comm from the client side.\nKernel.getSpecs()\n  .then(kernelSpecs => {\n    return Kernel.startNew({\n      name: kernelSpecs.default\n    });\n  })\n  .then(kernel => {\n    kernel.registerCommTarget('test2', (comm, commMsg) => {\n      if (commMsg.content.target_name !== 'test2') {\n        return;\n      }\n      comm.onMsg = msg => {\n        console.log(msg); // 'hello'\n      };\n      comm.onClose = msg => {\n        console.log(msg); // 'bye'\n      };\n    });\n\n    let code = [\n      'from ipykernel.comm import Comm',\n      'comm = Comm(target_name=\"test2\")',\n      'comm.send(data=\"hello\")',\n      'comm.close(data=\"bye\")'\n    ].join('\\n');\n    kernel.requestExecute({ code: code });\n  });\n```\n\n**Contents**\n\n```typescript\nimport { ContentsManager } from '@jupyterlab/services';\n\nlet contents = new ContentsManager();\n\n// Create a new python file.\ncontents.newUntitled({ path: '/foo', type: 'file', ext: 'py' }).then(model => {\n  console.log('new file:', model.path);\n});\n\n// Get the contents of a directory.\ncontents.get('/foo/bar').then(model => {\n  console.log('files:', model.content);\n});\n\n// Rename a file.\ncontents.rename('/foo/bar.txt', '/foo/baz.txt');\n\n// Save a file.\ncontents.save('/foo/test.ipynb');\n\n// Delete a file.\ncontents.delete('/foo/bar.txt');\n\n// Copy a file.\ncontents.copy('/foo/bar.txt', '/baz').then(model => {\n  console.log('new path', model.path);\n});\n\n// Create a checkpoint.\ncontents.createCheckpoint('/foo/bar.ipynb').then(model => {\n  let checkpoint = model;\n\n  // Restore a checkpoint.\n  contents.restoreCheckpoint('/foo/bar.ipynb', checkpoint.id);\n\n  // Delete a checkpoint.\n  contents.deleteCheckpoint('/foo/bar.ipynb', checkpoint.id);\n});\n\n// List checkpoints for a file.\ncontents.listCheckpoints('/foo/bar.txt').then(models => {\n  console.log(models[0].id);\n});\n```\n\n**Configuration**\n\n```typescript\nimport { ConfigWithDefaults, ConfigSection } from '@jupyterlab/services';\n\n// The base url of the Jupyter server.\n\nConfigSection.create({ name: 'notebook' }).then(section => {\n  let config = new ConfigWithDefaults({\n    section,\n    defaults: { default_cell_type: 'code' },\n    className: 'Notebook'\n  });\n  console.log(config.get('default_cell_type')); // 'code'\n  config.set('foo', 'bar').then(data => {\n    console.log(data); // \"{ 'foo': 'bar' }\"\n  });\n});\n```\n\n**Terminals**\n\n```typescript\nimport { TerminalSession } from '@jupyterlab/services';\n\n// Create a named terminal session and send some data.\nTerminalSession.startNew().then(session => {\n  session.send({ type: 'stdin', content: ['foo'] });\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jupyterlab/jupyterlab.git"
  },
  "scripts": {
    "build": "tsc -b",
    "clean": "rimraf docs && rimraf lib && rimraf test/build && rimraf test/coverage",
    "docs": "typedoc --options tdoptions.json --theme ../../typedoc-theme src",
    "prepublishOnly": "jlpm run build && webpack",
    "watch": "tsc -b --watch"
  },
  "typings": "lib/index.d.ts",
  "version": "4.0.0-alpha.8"
}
